<!DOCTYPE html>
<html>
<head>
	<title></title>
	<link rel="stylesheet" type="text/css" href="http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">
	<script type="text/javascript" src="http://ajax.aspnetcdn.com/ajax/knockout/knockout-3.0.0.js"></script>
	<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
</head>
<body style="padding-top:70px">
<div class="navbar navbar-inverse navbar-fixed-top" role="navigation">
      <div class="container">
        <div class="navbar-header">
          <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a class="navbar-brand" href="#">Ladder Grid</a>
        </div>
      </div>
    </div>
	<div class="container">
			<div class="jumbotron">
				
				<h1>Use a highly extensible grid</h1>
				<p>Ladder grid was built from the ground up to allow extensibility. Every component in the ladder grid is extensible in multiple ways</p>
				<p>The core ladder grid components can be extendended using simple prototype inheritance, the Ladder inheritance paradigm gives you more powerfull options:</p>
				<ul>
					<li>Extend your instance objects using knockout observables and computeds!</li>
					<li>Extend object instantiation code</li>
					<li>Extend templates at multiple levels, global templates, grid level templates and row/column level template extensions.</li>
					<li>Intercept core grid properties and modify them (for example use a custom function to deturmine which columns should be visible)</li>
					<li>Add your own classes and use them in the grid (for example add  an 'aggregate-row' class). Newly added classes can inherit from existing classes which makes it easy to use them in the place of existing classes.</li>
				</ul>
			</div>
		<div class="row">
			Write your own code:<br>
			<textarea data-bind="value: vmsource" class="col-sm-12">
			</textarea>	
		</div>
		<div data-bind="with: $data.viewmodel">
			<div class="" data-bind="render: $data.template" >
			
			</div>
		</div>
	</div>
	<script id="tableTemplate" type="text/html">
	<table class="table">
		<!-- ko render: theadTemplate -->
		<!-- /ko -->
		<!-- ko render: tbodyTemplate -->
		<!-- /ko -->
		<!-- ko render: tfootTemplate -->
		<!-- /ko -->
	</table>

	</script>
	<script type="text/javascript" src="ladder.js"></script>
	<script type="text/javascript" src="ladderTemplates.js"></script>
	<script type="text/javascript" src="ladderGrid.js"></script>

	<script type="text/javascript">
	var outervm = {

	};
	outervm.vmsource = ko.observable('	\nladderGrid.Table.create({extenders: [], columnDefs: [\n	{field: "test"},\n	{field: "a"},\n	{field: "b"},\n	], data: [\n	{test: 5, a: 6, b: 5},\n	{test: 5, a: 6, b: 5},\n	{test: 5, a: 6, b: 5}\n	]});')
	outervm.viewmodel = ko.computed(function () {
		return eval(outervm.vmsource());
	})
	ko.applyBindings(outervm);

	</script>
</body>
</html>